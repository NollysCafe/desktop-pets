.git:```git

```

.gitignore:```gitignore
node_modules
dist
pnpm-lock.yaml

```

dist:```/dist

```

node_modules:```/node_modules

```

package.json:```json
{
	"name": "desktop-pets",
	"version": "1.0.0",
	"type": "module",
	"main": "dist/main.cjs",
	"scripts": {
		"dev": "vite",
		"build": "vite build && tsc -p tsconfig.main.json && mv dist/main.js dist/main.cjs",
		"start": "pnpm build && electron ."
	},
	"dependencies": {
		"electron": "^35.1.5"
	},
	"devDependencies": {
		"@types/node": "^22.14.1",
		"typescript": "^5.8.3",
		"vite": "^6.3.1"
	}
}

```

pnpm-workspace.yaml:```yaml
onlyBuiltDependencies:
  - electron
  - esbuild

```

src/main/main.ts:```ts
import { app, BrowserWindow } from 'electron'
import path from 'node:path'

const createWindow = () => {
	const window = new BrowserWindow({
		width: 800,
		height: 600,
		transparent: false,
		frame: true,
		webPreferences: {
			contextIsolation: true,
			nodeIntegration: false,
			sandbox: true,
			preload: path.resolve(__dirname, 'preload.js'),
		}
	})

	window.loadFile(path.resolve(__dirname, 'index.html'))
}

app.whenReady().then(() => {
	createWindow()

	app.on('activate', () => {
		if (BrowserWindow.getAllWindows().length === 0) createWindow()
	})
})

app.on('window-all-closed', () => {
	if (process.platform !== 'darwin') app.quit()
})

```

src/main/preload.ts:```ts
import { contextBridge } from 'electron'

contextBridge.exposeInMainWorld('api', {
	ping: () => 'pong',
})

```

src/renderer/index.html:```html
<!DOCTYPE html>
<html lang='en'>

<head>
	<meta charset='UTF-8'>
	<meta name='viewport' content='width=device-width, initial-scale=1.0'>
	<meta http-equiv='Content-Security-Policy'
		content="default-src 'self'; script-src 'self'; style-src 'self'; font-src 'self'; img-src 'self'; connect-src 'self';">

	<title>Desktop Pets (Electron)</title>

	<link rel='stylesheet' href='./styles.css'>
	<script type='module' src='./renderer.ts' defer></script>
</head>

<body>
	<h1>Desktop Pets üêæ</h1>
</body>

</html>

```

src/renderer/renderer.ts:```ts
console.log('üêæ Desktop Pets Renderer Loaded')

console.log('üîÅ Ping:', (window as any).api?.ping?.())

```

src/renderer/styles.css:```css
:root {
	--primary: #e8daf0;
	--secondary: #c8ceee;

	--text: #fefefe;
	--text-secondary: #eeeeee;
	--text-inverted: #1a1a1a;

	--background: #1a1a1a;
	--surface: #2b2b2b;
	--border: #4d4d4d;
}

* {
	margin: 0;
	padding: 0;
	border: none;
	outline: none;
	user-select: none;
	box-sizing: border-box;
	font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
}

html,
body {
	height: 100vh;
	width: 100vw;
	display: flex;
	align-items: center;
	justify-content: center;
	color: var(--text);
	background-color: var(--background);
}

```

src/types/api.d.ts:```ts
export { }

declare global {
	interface Window {
	}
}

```

tsconfig.json:```json
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "ESNext",
		"lib": [ "ES2020", "DOM" ],
    "moduleResolution": "Node",
    "esModuleInterop": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "noEmit": true,
    "strict": true,
    "baseUrl": "./",
    "paths": {
      "~/*": [ "src/*" ]
    }
  },
  "include": [ "src" ]
}

```

tsconfig.main.json:```json
{
	"extends": "./tsconfig.json",
	"compilerOptions": {
		"outDir": "dist",
		"noEmit": false,
		"module": "CommonJS",
		"target": "ES2020",
		"removeComments": true,
		"rootDirs": [ "src/types" ]
	},
	"include": [ "src/main" ]
}

```

vite.config.ts:```ts
import { defineConfig } from 'vite'

export default defineConfig({
	root: 'src/renderer',
	base: './',
	build: {
		outDir: '../../dist',
		emptyOutDir: true,
	},
})

```

